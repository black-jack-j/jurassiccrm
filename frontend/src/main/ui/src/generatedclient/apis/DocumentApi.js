"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * JurassicCRM
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fitisovdmtr@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var DocumentApi = /** @class */ (function (_super) {
    __extends(DocumentApi, _super);
    function DocumentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * createDocument
     */
    DocumentApi.prototype.createDocumentRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.documentType === null || requestParameters.documentType === undefined) {
                            throw new runtime.RequiredError('documentType', 'Required parameter requestParameters.documentType was null or undefined when calling createDocument.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/api/document/{documentType}".replace("{" + "documentType" + "}", encodeURIComponent(String(requestParameters.documentType))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.DocumentInputTOToJSON(requestParameters.body),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.DocumentOutputTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * createDocument
     */
    DocumentApi.prototype.createDocument = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createDocumentRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * createResearchData
     */
    DocumentApi.prototype.createResearchDataRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.researchData === null || requestParameters.researchData === undefined) {
                            throw new runtime.RequiredError('researchData', 'Required parameter requestParameters.researchData was null or undefined when calling createResearchData.');
                        }
                        if (requestParameters.attachment === null || requestParameters.attachment === undefined) {
                            throw new runtime.RequiredError('attachment', 'Required parameter requestParameters.attachment was null or undefined when calling createResearchData.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        // use FormData to transmit files using content-type "multipart/form-data"
                        useForm = canConsumeForm;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.researchData !== undefined) {
                            formParams.append('researchData', requestParameters.researchData);
                        }
                        if (requestParameters.attachment !== undefined) {
                            formParams.append('attachment', requestParameters.attachment);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/api/document/RESEARCH_DATA",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.DocumentOutputTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * createResearchData
     */
    DocumentApi.prototype.createResearchData = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createResearchDataRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get all documents
     */
    DocumentApi.prototype.getAllDocumentsRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/api/document",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.DocumentOutputTOFromJSON); })];
                }
            });
        });
    };
    /**
     * get all documents
     */
    DocumentApi.prototype.getAllDocuments = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllDocumentsRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get document by id
     */
    DocumentApi.prototype.getDocumentByIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.documentType === null || requestParameters.documentType === undefined) {
                            throw new runtime.RequiredError('documentType', 'Required parameter requestParameters.documentType was null or undefined when calling getDocumentById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getDocumentById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/api/document/{documentType}/{id}".replace("{" + "documentType" + "}", encodeURIComponent(String(requestParameters.documentType))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.DocumentOutputTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * get document by id
     */
    DocumentApi.prototype.getDocumentById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDocumentByIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * get all document types
     */
    DocumentApi.prototype.getDocumentTypesRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/api/document/type",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.TextApiResponse(response)];
                }
            });
        });
    };
    /**
     * get all document types
     */
    DocumentApi.prototype.getDocumentTypes = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDocumentTypesRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * getDocumentsByType
     */
    DocumentApi.prototype.getDocumentsByTypeRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.documentType === null || requestParameters.documentType === undefined) {
                            throw new runtime.RequiredError('documentType', 'Required parameter requestParameters.documentType was null or undefined when calling getDocumentsByType.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/api/document/{documentType}".replace("{" + "documentType" + "}", encodeURIComponent(String(requestParameters.documentType))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.DocumentOutputTOFromJSON); })];
                }
            });
        });
    };
    /**
     * getDocumentsByType
     */
    DocumentApi.prototype.getDocumentsByType = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDocumentsByTypeRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * updateDocument
     */
    DocumentApi.prototype.updateDocumentRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.documentType === null || requestParameters.documentType === undefined) {
                            throw new runtime.RequiredError('documentType', 'Required parameter requestParameters.documentType was null or undefined when calling updateDocument.');
                        }
                        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
                            throw new runtime.RequiredError('documentId', 'Required parameter requestParameters.documentId was null or undefined when calling updateDocument.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/api/document/{documentType}/{documentId}".replace("{" + "documentType" + "}", encodeURIComponent(String(requestParameters.documentType))).replace("{" + "documentId" + "}", encodeURIComponent(String(requestParameters.documentId))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.DocumentInputTOToJSON(requestParameters.body),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.DocumentOutputTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * updateDocument
     */
    DocumentApi.prototype.updateDocument = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateDocumentRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * updateResearchData
     */
    DocumentApi.prototype.updateResearchDataRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
                            throw new runtime.RequiredError('documentId', 'Required parameter requestParameters.documentId was null or undefined when calling updateResearchData.');
                        }
                        if (requestParameters.researchData === null || requestParameters.researchData === undefined) {
                            throw new runtime.RequiredError('researchData', 'Required parameter requestParameters.researchData was null or undefined when calling updateResearchData.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        // use FormData to transmit files using content-type "multipart/form-data"
                        useForm = canConsumeForm;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.researchData !== undefined) {
                            formParams.append('researchData', requestParameters.researchData);
                        }
                        if (requestParameters.attachment !== undefined) {
                            formParams.append('attachment', requestParameters.attachment);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/api/document/RESEARCH_DATA/{documentId}".replace("{" + "documentId" + "}", encodeURIComponent(String(requestParameters.documentId))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.DocumentOutputTOFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * updateResearchData
     */
    DocumentApi.prototype.updateResearchData = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateResearchDataRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return DocumentApi;
}(runtime.BaseAPI));
exports.DocumentApi = DocumentApi;
/**
    * @export
    * @enum {string}
    */
var CreateDocumentDocumentTypeEnum;
(function (CreateDocumentDocumentTypeEnum) {
    CreateDocumentDocumentTypeEnum["ThemeZoneProject"] = "THEME_ZONE_PROJECT";
    CreateDocumentDocumentTypeEnum["DinosaurPassport"] = "DINOSAUR_PASSPORT";
    CreateDocumentDocumentTypeEnum["TechnologicalMap"] = "TECHNOLOGICAL_MAP";
    CreateDocumentDocumentTypeEnum["AviaryPassport"] = "AVIARY_PASSPORT";
    CreateDocumentDocumentTypeEnum["ResearchData"] = "RESEARCH_DATA";
})(CreateDocumentDocumentTypeEnum = exports.CreateDocumentDocumentTypeEnum || (exports.CreateDocumentDocumentTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetDocumentByIdDocumentTypeEnum;
(function (GetDocumentByIdDocumentTypeEnum) {
    GetDocumentByIdDocumentTypeEnum["ThemeZoneProject"] = "THEME_ZONE_PROJECT";
    GetDocumentByIdDocumentTypeEnum["DinosaurPassport"] = "DINOSAUR_PASSPORT";
    GetDocumentByIdDocumentTypeEnum["TechnologicalMap"] = "TECHNOLOGICAL_MAP";
    GetDocumentByIdDocumentTypeEnum["AviaryPassport"] = "AVIARY_PASSPORT";
    GetDocumentByIdDocumentTypeEnum["ResearchData"] = "RESEARCH_DATA";
})(GetDocumentByIdDocumentTypeEnum = exports.GetDocumentByIdDocumentTypeEnum || (exports.GetDocumentByIdDocumentTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetDocumentsByTypeDocumentTypeEnum;
(function (GetDocumentsByTypeDocumentTypeEnum) {
    GetDocumentsByTypeDocumentTypeEnum["ThemeZoneProject"] = "THEME_ZONE_PROJECT";
    GetDocumentsByTypeDocumentTypeEnum["DinosaurPassport"] = "DINOSAUR_PASSPORT";
    GetDocumentsByTypeDocumentTypeEnum["TechnologicalMap"] = "TECHNOLOGICAL_MAP";
    GetDocumentsByTypeDocumentTypeEnum["AviaryPassport"] = "AVIARY_PASSPORT";
    GetDocumentsByTypeDocumentTypeEnum["ResearchData"] = "RESEARCH_DATA";
})(GetDocumentsByTypeDocumentTypeEnum = exports.GetDocumentsByTypeDocumentTypeEnum || (exports.GetDocumentsByTypeDocumentTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateDocumentDocumentTypeEnum;
(function (UpdateDocumentDocumentTypeEnum) {
    UpdateDocumentDocumentTypeEnum["ThemeZoneProject"] = "THEME_ZONE_PROJECT";
    UpdateDocumentDocumentTypeEnum["DinosaurPassport"] = "DINOSAUR_PASSPORT";
    UpdateDocumentDocumentTypeEnum["TechnologicalMap"] = "TECHNOLOGICAL_MAP";
    UpdateDocumentDocumentTypeEnum["AviaryPassport"] = "AVIARY_PASSPORT";
    UpdateDocumentDocumentTypeEnum["ResearchData"] = "RESEARCH_DATA";
})(UpdateDocumentDocumentTypeEnum = exports.UpdateDocumentDocumentTypeEnum || (exports.UpdateDocumentDocumentTypeEnum = {}));
