"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * JurassicCRM
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fitisovdmtr@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var runtime_1 = require("../runtime");
/**
* @export
* @enum {string}
*/
var TaskTOCurrentStateEnum;
(function (TaskTOCurrentStateEnum) {
    TaskTOCurrentStateEnum["Closed"] = "CLOSED";
    TaskTOCurrentStateEnum["Resolved"] = "RESOLVED";
    TaskTOCurrentStateEnum["InProgress"] = "IN_PROGRESS";
    TaskTOCurrentStateEnum["Open"] = "OPEN";
})(TaskTOCurrentStateEnum = exports.TaskTOCurrentStateEnum || (exports.TaskTOCurrentStateEnum = {})); /**
* @export
* @enum {string}
*/
var TaskTOPossibleNextStatesEnum;
(function (TaskTOPossibleNextStatesEnum) {
    TaskTOPossibleNextStatesEnum["Closed"] = "CLOSED";
    TaskTOPossibleNextStatesEnum["Resolved"] = "RESOLVED";
    TaskTOPossibleNextStatesEnum["InProgress"] = "IN_PROGRESS";
    TaskTOPossibleNextStatesEnum["Open"] = "OPEN";
})(TaskTOPossibleNextStatesEnum = exports.TaskTOPossibleNextStatesEnum || (exports.TaskTOPossibleNextStatesEnum = {})); /**
* @export
* @enum {string}
*/
var TaskTOTaskTypeEnum;
(function (TaskTOTaskTypeEnum) {
    TaskTOTaskTypeEnum["Research"] = "RESEARCH";
    TaskTOTaskTypeEnum["Incubation"] = "INCUBATION";
    TaskTOTaskTypeEnum["AviaryCreation"] = "AVIARY_CREATION";
})(TaskTOTaskTypeEnum = exports.TaskTOTaskTypeEnum || (exports.TaskTOTaskTypeEnum = {}));
function TaskTOFromJSON(json) {
    return TaskTOFromJSONTyped(json, false);
}
exports.TaskTOFromJSON = TaskTOFromJSON;
function TaskTOFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'currentState': !runtime_1.exists(json, 'currentState') ? undefined : json['currentState'],
        'possibleNextStates': !runtime_1.exists(json, 'possibleNextStates') ? undefined : json['possibleNextStates'],
        'taskType': json['taskType'],
        'created': !runtime_1.exists(json, 'created') ? undefined : (new Date(json['created'])),
        'lastUpdated': !runtime_1.exists(json, 'lastUpdated') ? undefined : (new Date(json['lastUpdated'])),
        'taskPriorityId': !runtime_1.exists(json, 'taskPriorityId') ? undefined : json['taskPriorityId'],
        'createdById': !runtime_1.exists(json, 'createdById') ? undefined : json['createdById'],
        'lastUpdaterId': !runtime_1.exists(json, 'lastUpdaterId') ? undefined : json['lastUpdaterId'],
        'assigneeId': !runtime_1.exists(json, 'assigneeId') ? undefined : json['assigneeId'],
        'description': !runtime_1.exists(json, 'description') ? undefined : json['description'],
        'additionalParams': !runtime_1.exists(json, 'additionalParams') ? undefined : json['additionalParams'],
    };
}
exports.TaskTOFromJSONTyped = TaskTOFromJSONTyped;
function TaskTOToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'name': value.name,
        'currentState': value.currentState,
        'possibleNextStates': value.possibleNextStates,
        'taskType': value.taskType,
        'created': value.created === undefined ? undefined : (value.created.toISOString().substr(0, 10)),
        'lastUpdated': value.lastUpdated === undefined ? undefined : (value.lastUpdated.toISOString().substr(0, 10)),
        'taskPriorityId': value.taskPriorityId,
        'createdById': value.createdById,
        'lastUpdaterId': value.lastUpdaterId,
        'assigneeId': value.assigneeId,
        'description': value.description,
        'additionalParams': value.additionalParams,
    };
}
exports.TaskTOToJSON = TaskTOToJSON;
